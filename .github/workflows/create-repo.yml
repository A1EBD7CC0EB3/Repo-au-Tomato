name: Create Repository

on:
  issues:
    types: 
      - opened
env:
  ORG: 'A1EBD7CC0EB3'
jobs:
  build:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.labels.*.name, 'repo-creation')
    steps:
      - uses: actions/checkout@v3

      ## validate the deetz
      - uses: stefanbuck/github-issue-parser@v3
        id: issue-parser
        with:
          template-path: .github/ISSUE_TEMPLATE/repo_creation.yaml
      
      # Dont run if a field is empty
      - name: Test variables
        run: |
          if [[ -z "${{ steps.issue-parser.outputs.issueparser_repo-name }}" || -z "${{ steps.issue-parser.outputs.issueparser_template }}" ]] \
            || -z "${{ steps.issue-parser.outputs.issueparser_branch-name }}" ]]; then
            echo Please submit a new issue and fill out ALL the fields
            exit 1
          fi
          ## Todo write this to the issue, maybe allow a /rerun command

      # Check if repo by the name already exists and notify in issue/exit if it does
      # - name: Checking for repo existance
      #   id: checkRepo
      #   env:
      #     GH_TOKEN: ${{ secrets.PAT }}
      #   run: |
      #     gh api /repos/${{ env.ORG }}/${{ steps.issue-parser.outputs.issueparser_repo-name }} > /dev/null
      #     if [ $? -eq 0 ]; then
      #       echo "Repository already exists"
      #       gh issue comment ${{ github.event.issue.number }} --body "The repository already exists. Please try again with a different name."
      #       exit 1
      #     fi
      
      - name: Create repo
        id: createRepo
        continue-on-error: true
        # if: steps.checkRepo.outcome == 'failure'
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        run: |
          # do this https://docs.github.com/en/rest/repos/repos?apiVersion=2022-11-28#create-a-repository-using-a-template
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ steps.issue-parser.outputs.issueparser_template }}/generate \
            -f owner='${{ env.ORG }}' \
            -f name='${{ steps.issue-parser.outputs.issueparser_repo-name }}' \
            -f description='This a generated repo' \
            -F include_all_branches=false \
            -F private=true

      - name: Comment success on repo creation
        if: steps.createRepo.outcome == 'success'
        env:
          GH_TOKEN: ${{ secrets.PAT }}
        run: |
          gh issue comment ${{ github.event.issue.number }} \
            --body "The repository has been successfully created."

      - name: Comment failure on repo creation
        if: steps.createRepo.outcome == 'failure'
        env:
          GH_TOKEN: ${{ secrets.PAT }}
        run: |
          gh issue comment ${{ github.event.issue.number }} \
            --body "There was an error creating the repository. Please try again."

      - name: Add user as an admin of the repository
        id: addUserAsAdmin
        if: steps.createRepo.outcome == 'success'
        env:
          GH_TOKEN: ${{ secrets.PAT }}
        run: |
          gh api -X PUT /repos/${{ steps.issue-parser.outputs.issueparser_repo-name }}/collaborators/${{ github.event.issue.user.login }} -f permission=admin

      - name: Comment success adding user as admin
        if: steps.addUserAsAdmin.outcome == 'success'
        env:
          GH_TOKEN: ${{ secrets.PAT }}
        run: |
          gh issue comment ${{ github.event.issue.number }} \
            --body "The user ${{ github.event.issue.user.login }} was successsfully added as an admin of the repository"
  
      - name: Comment failure on adding user as admin
        if: steps.addUserAsAdmin.outcome == 'failure'
        env:
          GH_TOKEN: ${{ secrets.PAT }}
        run: |
          gh issue comment ${{ github.event.issue.number }} \
            --body "There was an error adding user ${{ github.event.issue.user.login }} as an admin of the repository. Please try again."    

      - name: TODO Add users/teams permissions to repo
        if: steps.createRepo.outcome == 'success'
        run: |
          # Comment back to issue & close issue. Add Github.actor as admin, add teams specified
          echo "teams todo"
  
      - name: Close issue
        if: steps.createRepo.outcome == 'success'
        env:
          GH_TOKEN: ${{ secrets.PAT }}
        run: |
          gh issue close ${{ github.event.issue.number }}
  

